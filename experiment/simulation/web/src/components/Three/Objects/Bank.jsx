/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/textures/iOB.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { Text } from "@react-three/drei";
import { Server } from "./Server";
import Glowcube from "./Glowcube";
import { useFrame } from "@react-three/fiber";
import { useDispatch, useSelector } from "react-redux";
import {
  startAnimation,
  stopAnimation,
  updateAnimationProgress,
  updateInstruction,
  updateRquest,
  updateTask,
  waitingStart,
} from "../../../redux/slices/doubleSpendingSlice";

export function Bank() {
  const {
    receiverName,
    receiverAmt,
    instructionMessage,
    isAnimating,
    showGlowCube,
    animationProgress,
    waiting,
    task,
    userBalance,
    request,
    isRestart,
  } = useSelector((state) => state.DoubleSpendingReducer);

  const dispatch = useDispatch();

  const cube = useRef();
  function calculateNewProgress(prevProgress, delta, animationDuration) {
    console.log(prevProgress);
    const newProgress = prevProgress + delta / animationDuration;
    if (newProgress >= 1) {
      dispatch(stopAnimation());
      dispatch(waitingStart(true));

      return 1;
    }
    return newProgress;
  }
  useFrame((state, delta) => {
    console.log(request);
    if (isAnimating) {
      const animationDuration = 2.7;
      const newProgress = calculateNewProgress(
        animationProgress,
        delta,
        animationDuration
      );
      dispatch(updateAnimationProgress(newProgress));

      request === "return"
        ? (cube.current.position.x -= delta * 2)
        : (cube.current.position.x += delta * 2);
    }
  });

  useEffect(() => {
    let animationTimer;
    if (waiting) {
      dispatch(
        updateInstruction([
          ...instructionMessage,
          `Once Ram sends the money, it is received by the bank, which then initiates the processing of the transaction.`,
        ])
      );
      dispatch(updateTask(1));
      animationTimer = setTimeout(() => {
        dispatch(startAnimation());
        dispatch(updateTask(2));
      }, 2000);
    }

    return () => {
      clearTimeout(animationTimer);
    };
  }, [waiting]);

  useEffect(() => {
    if (task === 2) {
      dispatch(
        updateInstruction([
          ...instructionMessage,
          `
          In this process, the bank will disburse the funds to ${receiverName} before the transaction is considered finalized.`,
          `By pressing the cancel button, you can detect instances of double spending occurring in a centralized database.`,
        ])
      );
    }
  }, [task]);
  useEffect(() => {
    let timmer;
    if (request === "cancel") {
      (cube.current.position.x = -1),
        (cube.current.position.y = 1.9),
        (cube.current.position.z = -1.5);
      dispatch(
        updateInstruction([
          ...instructionMessage,
          `Ram has contacted the bank with a request to revoke or void the Demand Draft (DD) transaction that was originally intended for ${receiverName}.`,
        ])
      );
      timmer = setTimeout(() => {
        dispatch(updateRquest("return"));
        dispatch(startAnimation());
      }, 4000);
    }
    if (request === "return") {
      dispatch(
        updateInstruction([
          ...instructionMessage,
          `Despite the bank returning ${userBalance} rupees to Ram, it failed to deduct the same amount from ${receiverName}'s account.`,
          `
    In this scenario, both Ram and ${receiverName} now possess ${userBalance} rupees each, while the bank's ledger appears to be missing ${userBalance} rupees, creating a discrepancy in the bank's records..`,
        ])
      );
    }

    return () => {
      clearTimeout(timmer);
    };
  }, [request]);

  return (
    <group position={[0, -0.5, 0]}>
      <group
        scale={showGlowCube ? 1 : 0}
        ref={cube}
        rotation={[0, 6.2, 0]}
        position={[-1, 1.9, -1.5]}
      >
        <Text
          strokeColor={"white"}
          position={[-4.7, 0.5, 0]}
          fontSize={0.2}
          scale={showGlowCube ? 1 : 0}
          strokeWidth={10}
        >
          {request === "cancel" ? "Cancel Request" : `${receiverAmt} Rs`}
        </Text>
        <Glowcube position={[-5, 0, 0]} />
        <Glowcube position={[-4.7, 0, 0]} />
        <Glowcube position={[-4.4, 0, 0]} />
      </group>

      <group position={[0, 0, -0.5]}>
        <group position={[-1, -0.1, 0]}>
          <Server position={[2, 0, 0]} />
          <Server position={[1, 0, 0]} />
          <Server position={[0, 0, 0]} />
        </group>

        <Text
          strokeColor={"white"}
          position={[-0.1, 4, -2.5]}
          fontSize={0.2}
          scale={1.5}
          strokeWidth={10}
        >
          Conventional Database
        </Text>
        <mesh>
          <spotLight
            intensity={500}
            angle={0.7}
            position={[0, -3, 0]}
            color={waiting ? "red" : "white"}
          />
        </mesh>
      </group>
    </group>
  );
}
